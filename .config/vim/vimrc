set nocompatible " Prevent unexpected distro changes & reset vimrc re-sourcing config

" Attempt to determine the type of a file based on its name and possibly its
" contents. Use this to allow intelligent auto-indenting for each filetype,
" and for plugins that are filetype specific.
filetype indent plugin on

syntax on " Enable syntax highlighting

" Configure XDG locations
set runtimepath=~/.config/vim,~/.config/vim/after,$VIM,$VIMRUNTIME
set viminfo+=n~/.config/vim/viminfo
set directory=~/.config/vim/swap//,.,~/tmp,/var/tmp,/tmp
set backupdir=~/.config/vim/backup//,.,~/tmp,~/
set undodir=~/.config/vim/undo//,.

" Check if the vim-plug plugin manager is installed
" If not, install and configure it
if empty(glob('~/.config/vim/autoload/plug.vim'))
  silent !curl -fLo ~/.config/vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync
endif

" Add plugins using vim-plug
call plug#begin('~/.config/vim/plugged')
  " Functional
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-commentary'
  Plug 'editorconfig/editorconfig-vim'

  " Appearance
  Plug 'itchyny/lightline.vim'
  Plug 'morhetz/gruvbox'
call plug#end()

" General colorscheme
let gruvbox_contrast_dark='hard'
colorscheme gruvbox
set background=dark
highlight Normal ctermbg=0

" Configure lightline
set laststatus=2
set noshowmode
let g:lightline = {
      \ 'colorscheme': 'gruvbox',
      \ }

set splitbelow splitright " Splits open at the bottom and right, instead of top and left
set number relativenumber " Show relative line numbering

" Re-use the same window and switch from an unsaved buffer without saving it
" first. Also allows you to keep an undo history for multiple files when
" re-using the same window in this way.
set hidden

set path+=** " For clever completion with the :find command
set showcmd " Show partial commands in the last line of the screen
set cmdheight=2 " Give more space for displaying messages
set wildmenu " Better command-line completion
set incsearch " Get results when you search
set hlsearch " Switch on highlighting the last used search pattern.
set ignorecase smartcase " Use case insensitive search, except when using capital letters
set backspace=indent,eol,start " Allow backspacing over indent, eol and start of insert action
set autoindent " Keep same line indentation when no filtype-specific config is present
set tabstop=4 " Tab size
set shiftwidth=4 " Determine indentation per level
set expandtab " Expand tab to spaces

set backup " keep a backup file (restore to previous version)
if has('persistent_undo')
    set undofile    " keep an undo file (undo changes after closing)
endif

" Makes the % command work better (nocompatible required)
" The ! means the package won't be loaded right away but when plugins are
" loaded during initialization.
packadd! matchit

" Remaps
" Yank until last non-blank character of line
nnoremap Y yg_

" Center on search and line joining
nnoremap n nzzzv
nnoremap N Nzzzv
nnoremap J mzJ`z

" Undo with breakpoints
inoremap , ,<c-g>u
inoremap . .<c-g>u
inoremap ! !<c-g>u
inoremap ? ?<c-g>u

" Repeat renaming with .
nnoremap cn *``cgn
nnoremap cN *``cgN

" Autocommands
fun! TrimTrailingWhitespace()
    if !&binary && &filetype != 'diff'
        let l:save = winsaveview()
        keeppatterns %s/\s\+$//e
        call winrestview(l:save)
    endif
endfun

augroup vimStartup
    " Remove all autocommands for the current group
    au!

    " Jump to the last known cursor position.
    " Don't when the position is invalid, when inside an event handler and for a
    " commit message (it's likely a different one than last time).
    autocmd BufReadPost *
    \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
    \ |   exe "normal! g`\""
    \ | endif

augroup END

augroup convenience
    au!
    autocmd BufWritePre * :call TrimTrailingWhitespace()
augroup END
